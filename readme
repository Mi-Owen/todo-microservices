Proyecto Fullstack - Todo App

Aplicaci√≥n fullstack con microservicios en Flask y frontend en Angular, dise√±ada para gestionar tareas de manera eficiente y segura.

Estructura del Proyecto

.
‚îú‚îÄ‚îÄ backend/ # Microservicios y API Gateway en Flask
‚îî‚îÄ‚îÄ frontend/ # Aplicaci√≥n Angular (puerto 4200)

Tecnolog√≠as Utilizadas

- Frontend: Angular
- Backend: Python 3 + Flask + SQLite
- Seguridad: JWT (JSON Web Tokens)
- Comunicaci√≥n: API Gateway + Requests
- Herramientas: Postman, WSL (Windows Subsystem for Linux)

Backend - Configuraci√≥n e Inicio

1. Instalar dependencias

cd backend
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

2. Iniciar servicios

bash start_services.sh

3. Detener servicios

bash stop_services.sh

Ejemplo stop_services.sh:
#!/bin/bash
echo "Deteniendo servicios..."
pkill -f auth_service.py
pkill -f user_service.py
pkill -f task_service.py
pkill -f api_gateway.py
echo "Servicios detenidos."

Estructura de Microservicios

| Servicio     | Ruta                | Descripci√≥n                      |
| ------------ | ------------------- | -------------------------------- |
| Auth Service | auth_service/app.py | Registro, login y gesti√≥n de JWT |
| User Service | user_service/app.py | CRUD de usuarios                 |
| Task Service | task_service/app.py | CRUD de tareas con estados       |
| API Gateway  | api_gateway/app.py  | Enrutamiento hacia los servicios |

Pruebas con Postman

1. Registrar usuario (POST ‚Üí http://localhost:5000/auth/register)

{
"username": "usuario1",
"password": "12345678",
"email": "usuario1@correo.com",
"birthdate": "1990-01-01",
"secret_question": "Color favorito?",
"secret_answer": "Azul"
}

2. Login y obtenci√≥n de token (POST ‚Üí http://localhost:5000/auth/login)

{
"username": "usuario1",
"password": "miContrase√±a123"
}

Guardar el token JWT para futuras peticiones.

3. Crear tarea (POST ‚Üí http://localhost:5003/tasks)
   Authorization: Bearer <tu_token_aqu√≠>

{
"name": "Terminar proyecto",
"description": "Completar backend para la app",
"deadline": "2025-07-15T23:59:00"
}

4. Listar tareas (GET ‚Üí http://localhost:5003/tasks)

Authorization: Bearer <tu_token_aqu√≠>

5. Actualizar estado de tarea (PUT ‚Üí http://localhost:5003/tasks/<task_id>)

Authorization: Bearer <tu_token_aqu√≠>

{
"status": "Completed"
}

6. Eliminar tarea (DELETE ‚Üí http://localhost:5003/tasks/<task_id>)

Authorization: Bearer <tu_token_aqu√≠>

üìù Notas Finales

- Todos los microservicios comparten la misma base de datos: main_database.db
- Los JWT se validan en los endpoints protegidos
- Puedes a√±adir m√°s validaciones, logs o mejoras seg√∫n tus necesidades
